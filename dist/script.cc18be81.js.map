{"version":3,"sources":["../src/treeNode.ts","../src/iTree.ts","node_modules/knuth-shuffle/index.js","../src/index.ts","script.js"],"names":["console","log","formattedReps","lan","isolationForest","IsolationForest","fit","scores","formattedReps1","isolationForest1","scores1","formattedReps2","isolationForest2","scores2","formattedReps3","isolationForest3","scores3","formattedReps4","isolationForest4","scores4","data","lat","long","isolationForest5","scores5"],"mappings":"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","file":"script.cc18be81.js","sourceRoot":"..","sourcesContent":["import { DataObject } from './index';\n\nexport class TreeNode {\n  public leftChild: TreeNode = undefined;\n  public rightChild: TreeNode = undefined;\n  public splitAttribute: string = undefined;\n  public splitValue: number = undefined;\n\n  private X: DataObject[];\n  private height: number;\n  private heightLimit: number;\n\n  private max(arr: number[]): number {\n    let len = arr.length;\n    let max = arr[0];\n\n    while (len--) {\n      max = max >= arr[len] ? max : arr[len];\n    }\n    return max;\n  }\n\n  private min(arr: number[]): number {\n    let len = arr.length;\n    let min = arr[0];\n\n    while (len--) {\n      min = min >= arr[len] ? arr[len] : min;\n    }\n    return min;\n  }\n\n  constructor(X: DataObject[], height: number, heightLimit: number) {\n    this.height = height;\n    this.heightLimit = heightLimit;\n    if (height >= heightLimit || X.length <= 1) {\n      this.X = X;\n      return this;\n    } else {\n      const attributes = this.getAttributes(X[0]);\n      this.splitAttribute = attributes[Math.floor(Math.random() * attributes.length)];\n      const splitAttributeArray = X.map(x => x[this.splitAttribute]);\n      const attributeMax = this.max(splitAttributeArray);\n      const attributeMin = this.min(splitAttributeArray);\n      this.splitValue = Math.random() * (attributeMax - attributeMin) + attributeMin;\n      const dataSplitA = X.filter(x => x[this.splitAttribute] < this.splitValue);\n      const dataSplitB = X.filter(x => x[this.splitAttribute] >= this.splitValue);\n      this.leftChild = new TreeNode(dataSplitA, height + 1, heightLimit);\n      this.rightChild = new TreeNode(dataSplitB, height + 1, heightLimit);\n      return this;\n    }\n  }\n\n  public isExternalNode(): boolean {\n    return this.leftChild === undefined && this.rightChild === undefined;\n  }\n\n  public isInternalNode(): boolean {\n    return this.leftChild !== undefined && this.rightChild !== undefined;\n  }\n\n  public size(): number {\n    if (this.X !== undefined) {\n      return this.X.length;\n    }\n    return 0;\n  }\n\n  private getAttributes(x: DataObject): string[] {\n    return Object.keys(x);\n  }\n}\n","import { DataObject } from './index';\nimport { TreeNode } from './treeNode';\n\nexport class ITree {\n  private rootNode: TreeNode;\n\n  constructor(X: DataObject[], heightLimit: number) {\n    this.rootNode = new TreeNode(X, 0, heightLimit);\n  }\n\n  public pathLength(x: DataObject, treeNode: TreeNode, currentPathLength: number): number {\n    if (treeNode.isExternalNode()) {\n      return currentPathLength + averagePathLength(treeNode.size());\n    }\n    const splitAttr: string = treeNode.splitAttribute;\n    if (x[splitAttr] < treeNode.splitValue) {\n      return this.pathLength(x, treeNode.leftChild, currentPathLength + 1);\n    } else {\n      return this.pathLength(x, treeNode.rightChild, currentPathLength + 1);\n    }\n  }\n\n  public size(): number {\n    return this.rootNode.size();\n  }\n\n  public getRootNode(): TreeNode {\n    return this.rootNode;\n  }\n}\n\nexport function averagePathLength(n: number) {\n  if (n === 0 || n === 1) {\n    return 0;\n  } else if (n === 2) {\n    return 1;\n  }\n  return 2 * harmonicNumber(n - 1) - (2 * (n - 1)) / n;\n}\n\nexport const EULER_MASCHERONI = 0.57721;\n\nexport function harmonicNumber(i: number): number {\n  return Math.log(i) + EULER_MASCHERONI;\n}\n","/*jshint -W054 */\n(function (exports) {\n  'use strict';\n\n  // http://stackoverflow.com/questions/2450954/how-to-randomize-shuffle-a-javascript-array\n  function shuffle(array) {\n    var currentIndex = array.length\n      , temporaryValue\n      , randomIndex\n      ;\n\n    // While there remain elements to shuffle...\n    while (0 !== currentIndex) {\n\n      // Pick a remaining element...\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n\n      // And swap it with the current element.\n      temporaryValue = array[currentIndex];\n      array[currentIndex] = array[randomIndex];\n      array[randomIndex] = temporaryValue;\n    }\n\n    return array;\n  }\n\n  exports.knuthShuffle = shuffle;\n}('undefined' !== typeof exports && exports || 'undefined' !== typeof window && window || global));\n","import { averagePathLength, ITree } from './iTree';\n\nconst shuffle = require('knuth-shuffle').knuthShuffle;\n\nexport interface DataObject {\n  [key: string]: number;\n}\n\nexport class IsolationForest {\n  public trees: ITree[];\n  public X: DataObject[];\n\n  private subsamplingSize: number;\n  private numberOfTrees: number;\n  private shuffleData: boolean;\n\n  constructor(numberOfTrees: number = 100, subsamplingSize: number = 256) {\n    this.subsamplingSize = subsamplingSize;\n    this.numberOfTrees = numberOfTrees;\n    this.trees = [];\n    this.X = [];\n  }\n\n  public fit(X: DataObject[]): ITree[] {\n    this.X = X;\n    if (this.X.length < this.subsamplingSize) {\n      this.subsamplingSize = this.X.length;\n    }\n    const heightLimit = Math.ceil(Math.log2(this.subsamplingSize));\n\n    for (let i = 0; i < this.numberOfTrees; i++) {\n      const subsample = this.getSubsample(this.subsamplingSize);\n\n      const iTree: ITree = new ITree(this.X, heightLimit);\n      this.trees.push(iTree);\n    }\n    return this.trees;\n  }\n\n  public scores(): number[] {\n    return this.predict(this.X)\n  }\n\n  public predict(X: DataObject[]): number[] {\n    const scoreArray: number[] = [];\n    for (const x of X) {\n      let pathLength: number = 0;\n      for (let j = 0; j < this.numberOfTrees; j++) {\n        pathLength += this.trees[j].pathLength(x, this.trees[j].getRootNode(), 0);\n      }\n      const meanPathLength = pathLength / this.numberOfTrees;\n      const score = Math.pow(2, -(meanPathLength / averagePathLength(this.subsamplingSize)));\n      scoreArray.push(score);\n    }\n    return scoreArray;\n  }\n\n  private getSubsample(subsampleSize: number): DataObject[] {\n    const subsample = [];\n    const data: DataObject[] = shuffle(this.X.slice(0));\n    return data.slice(0, subsampleSize);\n  }\n}\n","console.log(\"Connected\");\r\n\r\nimport { IsolationForest } from \"isolation-forest\";\r\n\r\n///////////////////////////////////////////////////////////////////////////////////\r\n///////////////////////////////////////////////////////////////////////////////////\r\nconst formattedReps = [\r\n  { lan: 110 },\r\n  { lan: 210 },\r\n  { lan: 310 },\r\n  { lan: 410 },\r\n  { lan: 510 },\r\n];\r\nvar isolationForest = new IsolationForest();\r\nisolationForest.fit(formattedReps);\r\nvar scores = isolationForest.scores();\r\nconsole.log(scores);\r\n\r\n///////////////////////////////////////////////////////////////////////////////////\r\n///////////////////////////////////////////////////////////////////////////////////\r\nconst formattedReps1 = [\r\n  { lan: 510 },\r\n  { lan: 419 },\r\n  { lan: 310 },\r\n  { lan: 210 },\r\n  { lan: 110 },\r\n];\r\nvar isolationForest1 = new IsolationForest();\r\nisolationForest1.fit(formattedReps1);\r\nvar scores1 = isolationForest1.scores();\r\nconsole.log(scores1);\r\n\r\n///////////////////////////////////////////////////////////////////////////////////\r\n///////////////////////////////////////////////////////////////////////////////////\r\nconst formattedReps2 = [\r\n  { lan: 110 },\r\n  { lan: 110 },\r\n  { lan: 110 },\r\n  { lan: 110 },\r\n  { lan: 110 },\r\n];\r\nvar isolationForest2 = new IsolationForest();\r\nisolationForest2.fit(formattedReps2);\r\nvar scores2 = isolationForest2.scores();\r\nconsole.log(scores2);\r\n\r\n///////////////////////////////////////////////////////////////////////////////////\r\n///////////////////////////////////////////////////////////////////////////////////\r\nconst formattedReps3 = [110, 210, 310, 410, 510];\r\nvar isolationForest3 = new IsolationForest();\r\nisolationForest3.fit(formattedReps3);\r\nvar scores3 = isolationForest3.scores();\r\nconsole.log(scores3);\r\n\r\n///////////////////////////////////////////////////////////////////////////////////\r\n///////////////////////////////////////////////////////////////////////////////////\r\nconst formattedReps4 = [110, 110, 110, 110, 110];\r\nvar isolationForest4 = new IsolationForest();\r\nisolationForest4.fit(formattedReps4);\r\nvar scores4 = isolationForest3.scores();\r\nconsole.log(scores4);\r\n\r\n///////////////////////////////////////////////////////////////////////////////////\r\n///////////////////////////////////////////////////////////////////////////////////\r\nvar data = [\r\n  { lat: 41.080386328434905, long: 28.99703979492188 },\r\n  { lat: 41.076633727112515, long: 28.997554779052738 },\r\n  { lat: 41.077539547047294, long: 29.003305435180668 },\r\n  { lat: 41.079415848632, long: 28.988885879516605 },\r\n  { lat: 41.076180812464166, long: 28.986911773681644 },\r\n  { lat: 41.08261837760025, long: 28.985624313354492 },\r\n  { lat: 41.08491504471011, long: 28.96030426025391 },\r\n  { lat: 41.072880911548936, long: 28.961849212646488 },\r\n  { lat: 41.05955021422251, long: 28.975582122802738 },\r\n  { lat: 41.0607151401866, long: 28.99703979492188 },\r\n  { lat: 41.09617078744703, long: 28.99154663085938 },\r\n  { lat: 41.10225067378896, long: 28.978843688964847 },\r\n  { lat: 41.08297420451945, long: 28.9735221862793 },\r\n  { lat: 41.08349176750823, long: 28.96905899047852 },\r\n  { lat: 41.0343050853874, long: 28.982620239257816 },\r\n  { lat: 41.06175061261111, long: 29.064502716064457 },\r\n  { lat: 41.027959915023665, long: 29.02622222900391 },\r\n  { lat: 41.06615118853871, long: 28.989143371582035 },\r\n  { lat: 41.05851470715539, long: 28.979701995849613 },\r\n  { lat: 41.08271542149653, long: 28.979358673095707 },\r\n  { lat: 41.08103330700923, long: 28.975410461425785 },\r\n  { lat: 41.086985211067336, long: 28.962707519531254 },\r\n  { lat: 41.074433826731486, long: 28.960990905761722 },\r\n  { lat: 41.069127881747995, long: 28.965625762939457 },\r\n  { lat: 41.07650432324571, long: 28.96854400634766 },\r\n  { lat: 41.07508086389766, long: 28.960647583007816 },\r\n  { lat: 41.06420979428149, long: 28.958244323730472 },\r\n  { lat: 41.07805715283417, long: 29.00047302246094 },\r\n  { lat: 41.067574841233906, long: 28.987426757812504 },\r\n  { lat: 41.05333692728665, long: 28.997383117675785 },\r\n  { lat: 41.05333692728665, long: 28.997383117675785 },\r\n  { lat: 41.048417658920364, long: 28.951721191406254 },\r\n  { lat: 41.075210270566636, long: 28.971977233886722 },\r\n  { lat: 41.07068088558002, long: 28.975582122802738 },\r\n  { lat: 41.062786068733026, long: 28.98897171020508 },\r\n  { lat: 41.0587735854505, long: 28.99068832397461 },\r\n  { lat: 41.08763212467916, long: 28.97729873657227 },\r\n  { lat: 41.09345406057922, long: 28.97180557250977 },\r\n  { lat: 41.19345406057922, long: 28.57180557250977 },\r\n  { lat: 40.85345406047822, long: 27.99180787250977 },\r\n  { lat: 40.99341406047111, long: 27.99180787257864 },\r\n];\r\n\r\nvar isolationForest5 = new IsolationForest();\r\nisolationForest5.fit(data);\r\nvar scores5 = isolationForest5.scores();\r\nconsole.log(scores5);\r\n"]}