{"id":"node_modules/isolation-forest/dist/iTree.js","dependencies":[{"name":"E:\\Resources\\Brackets\\02 JavaScript\\anolomy detection\\node_modules\\isolation-forest\\dist\\iTree.js.map","includedInParent":true,"mtime":499162500000},{"name":"E:\\Resources\\Brackets\\02 JavaScript\\anolomy detection\\node_modules\\isolation-forest\\src\\iTree.ts","includedInParent":true,"mtime":499162500000},{"name":"E:\\Resources\\Brackets\\02 JavaScript\\anolomy detection\\package.json","includedInParent":true,"mtime":1633006457103},{"name":"E:\\Resources\\Brackets\\02 JavaScript\\anolomy detection\\node_modules\\isolation-forest\\package.json","includedInParent":true,"mtime":1633006422593},{"name":"./treeNode","loc":{"line":3,"column":25},"parent":"E:\\Resources\\Brackets\\02 JavaScript\\anolomy detection\\node_modules\\isolation-forest\\dist\\iTree.js","resolved":"E:\\Resources\\Brackets\\02 JavaScript\\anolomy detection\\node_modules\\isolation-forest\\dist\\treeNode.js"}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar treeNode_1 = require(\"./treeNode\");\nvar ITree = /** @class */ (function () {\n    function ITree(X, heightLimit) {\n        this.rootNode = new treeNode_1.TreeNode(X, 0, heightLimit);\n    }\n    ITree.prototype.pathLength = function (x, treeNode, currentPathLength) {\n        if (treeNode.isExternalNode()) {\n            return currentPathLength + averagePathLength(treeNode.size());\n        }\n        var splitAttr = treeNode.splitAttribute;\n        if (x[splitAttr] < treeNode.splitValue) {\n            return this.pathLength(x, treeNode.leftChild, currentPathLength + 1);\n        }\n        else {\n            return this.pathLength(x, treeNode.rightChild, currentPathLength + 1);\n        }\n    };\n    ITree.prototype.size = function () {\n        return this.rootNode.size();\n    };\n    ITree.prototype.getRootNode = function () {\n        return this.rootNode;\n    };\n    return ITree;\n}());\nexports.ITree = ITree;\nfunction averagePathLength(n) {\n    if (n === 0 || n === 1) {\n        return 0;\n    }\n    else if (n === 2) {\n        return 1;\n    }\n    return 2 * harmonicNumber(n - 1) - (2 * (n - 1)) / n;\n}\nexports.averagePathLength = averagePathLength;\nexports.EULER_MASCHERONI = 0.57721;\nfunction harmonicNumber(i) {\n    return Math.log(i) + exports.EULER_MASCHERONI;\n}\nexports.harmonicNumber = harmonicNumber;\n"},"sourceMaps":{"js":{"version":3,"file":"iTree.js","sourceRoot":"","sources":["../src/iTree.ts"],"names":[],"mappings":";;AACA,uCAAsC;AAEtC;IAGE,eAAY,CAAe,EAAE,WAAmB;QAC9C,IAAI,CAAC,QAAQ,GAAG,IAAI,mBAAQ,CAAC,CAAC,EAAE,CAAC,EAAE,WAAW,CAAC,CAAC;IAClD,CAAC;IAEM,0BAAU,GAAjB,UAAkB,CAAa,EAAE,QAAkB,EAAE,iBAAyB;QAC5E,IAAI,QAAQ,CAAC,cAAc,EAAE,EAAE;YAC7B,OAAO,iBAAiB,GAAG,iBAAiB,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC,CAAC;SAC/D;QACD,IAAM,SAAS,GAAW,QAAQ,CAAC,cAAc,CAAC;QAClD,IAAI,CAAC,CAAC,SAAS,CAAC,GAAG,QAAQ,CAAC,UAAU,EAAE;YACtC,OAAO,IAAI,CAAC,UAAU,CAAC,CAAC,EAAE,QAAQ,CAAC,SAAS,EAAE,iBAAiB,GAAG,CAAC,CAAC,CAAC;SACtE;aAAM;YACL,OAAO,IAAI,CAAC,UAAU,CAAC,CAAC,EAAE,QAAQ,CAAC,UAAU,EAAE,iBAAiB,GAAG,CAAC,CAAC,CAAC;SACvE;IACH,CAAC;IAEM,oBAAI,GAAX;QACE,OAAO,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC;IAC9B,CAAC;IAEM,2BAAW,GAAlB;QACE,OAAO,IAAI,CAAC,QAAQ,CAAC;IACvB,CAAC;IACH,YAAC;AAAD,CAAC,AA1BD,IA0BC;AA1BY,sBAAK;AA4BlB,SAAgB,iBAAiB,CAAC,CAAS;IACzC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE;QACtB,OAAO,CAAC,CAAC;KACV;SAAM,IAAI,CAAC,KAAK,CAAC,EAAE;QAClB,OAAO,CAAC,CAAC;KACV;IACD,OAAO,CAAC,GAAG,cAAc,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;AACvD,CAAC;AAPD,8CAOC;AAEY,QAAA,gBAAgB,GAAG,OAAO,CAAC;AAExC,SAAgB,cAAc,CAAC,CAAS;IACtC,OAAO,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,wBAAgB,CAAC;AACxC,CAAC;AAFD,wCAEC","sourcesContent":["import { DataObject } from './index';\nimport { TreeNode } from './treeNode';\n\nexport class ITree {\n  private rootNode: TreeNode;\n\n  constructor(X: DataObject[], heightLimit: number) {\n    this.rootNode = new TreeNode(X, 0, heightLimit);\n  }\n\n  public pathLength(x: DataObject, treeNode: TreeNode, currentPathLength: number): number {\n    if (treeNode.isExternalNode()) {\n      return currentPathLength + averagePathLength(treeNode.size());\n    }\n    const splitAttr: string = treeNode.splitAttribute;\n    if (x[splitAttr] < treeNode.splitValue) {\n      return this.pathLength(x, treeNode.leftChild, currentPathLength + 1);\n    } else {\n      return this.pathLength(x, treeNode.rightChild, currentPathLength + 1);\n    }\n  }\n\n  public size(): number {\n    return this.rootNode.size();\n  }\n\n  public getRootNode(): TreeNode {\n    return this.rootNode;\n  }\n}\n\nexport function averagePathLength(n: number) {\n  if (n === 0 || n === 1) {\n    return 0;\n  } else if (n === 2) {\n    return 1;\n  }\n  return 2 * harmonicNumber(n - 1) - (2 * (n - 1)) / n;\n}\n\nexport const EULER_MASCHERONI = 0.57721;\n\nexport function harmonicNumber(i: number): number {\n  return Math.log(i) + EULER_MASCHERONI;\n}\n"]}},"error":null,"hash":"096acacb09fcde38b2cacecdc9169090","cacheData":{"env":{}}}